name: Fetch Events (Low Cost)

on:
  workflow_dispatch:
    inputs:
      keywords:
        description: "Comma-separated search keywords"
        type: string
        default: "event planner,event planning,wedding planner,party planner,corporate events,event management,event decor,balloon decor,stage rentals,audio visual"
      centers:
        description: 'Semicolon-separated "lat,lng" points'
        type: string
        default: "23.611,58.471;23.585,58.407;23.620,58.280;23.600,58.545;23.560,58.640;23.570,58.420;23.520,58.385;23.640,58.520"
      radius_m:
        description: "Search radius (meters)"
        type: number
        default: 6000
      max_pages_per_query:
        description: "Max pages per (keyword,center)"
        type: number
        default: 2
      max_places:
        description: "Stop after N unique places overall"
        type: number
        default: 140
      basic_only:
        description: "Cheapest mode (no hours/editorial)"
        type: boolean
        default: true
      details_throttle_sec:
        description: "Sleep between Details calls (sec)"
        type: number
        default: 0.2
      no_favicons:
        description: "Skip Google S2 favicon URLs"
        type: boolean
        default: false
      run_ingest:
        description: "Rebuild tools.json after fetch"
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  fetch-events:
    runs-on: ubuntu-latest
    env:
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          # Ensure runtime deps for fetchers
          pip install requests

      - name: Fetch events (image-free)
        run: |
          python scripts/fetch_events.py \
            --keywords "${{ github.event.inputs.keywords }}" \
            --centers  "${{ github.event.inputs.centers }}" \
            --radius   "${{ github.event.inputs.radius_m }}" \
            --max-pages-per-query "${{ github.event.inputs.max_pages_per_query }}" \
            --max-places "${{ github.event.inputs.max_places }}" \
            $([ "${{ github.event.inputs.basic_only }}" = "true" ] && printf -- "--basic-only" || true) \
            --details-throttle-sec "${{ github.event.inputs.details_throttle_sec }}" \
            $([ "${{ github.event.inputs.no_favicons }}" = "true" ] && printf -- "--no-favicons" || true)

      - name: Ensure Python packages (for ingest)
        if: ${{ github.event.inputs.run_ingest == 'true' }}
        run: |
          mkdir -p scripts/utils scripts/ingest
          touch scripts/__init__.py
          touch scripts/utils/__init__.py
          touch scripts/ingest/__init__.py

      - name: Build tools.json from CSV
        if: ${{ github.event.inputs.run_ingest == 'true' }}
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          python -m scripts.ingest.csv_to_tools

      - name: Commit & push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Fetch events (low cost)${{ github.event.inputs.run_ingest == 'true' && ' & rebuild tools.json' || '' }}"
          branch: ${{ github.ref_name }}
          file_pattern: |
            data/sources/events.csv
            data/tools.json
