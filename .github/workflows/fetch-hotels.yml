name: Fetch Hotels from Google

on:
  workflow_dispatch:
    inputs:
      keywords:
        description: "Comma-separated search keywords"
        default: "hotel,resort,guest house,aparthotel,boutique hotel,hostel,camp"
      centers:
        description: 'Semicolon-separated "lat,lng" points'
        default: "23.611,58.471;23.585,58.407;23.620,58.280;23.600,58.545;23.560,58.640;23.570,58.420;23.520,58.385;23.640,58.520"
      radius:
        description: "Search radius (meters)"
        default: "8000"
      basic_only:
        description: "Cheapest: only core detail fields (true/false)"
        default: "true"
      max_pages_per_query:
        description: "Max pages per (keyword,center)"
        default: "2"
      max_places:
        description: "Stop after N unique places overall"
        default: "150"
      details_throttle_sec:
        description: "Sleep seconds between Details calls"
        default: "0.2"
      wall_timeout_sec:
        description: "Abort run after this many seconds"
        default: "1200"
      no_favicons:
        description: "Do NOT set favicon URLs in logo_url (true/false)"
        default: "false"
  # schedule:
  #   - cron: "0 3 * * 1"

permissions:
  contents: write

jobs:
  fetch-hotels:
    runs-on: ubuntu-latest
    env:
      GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure folders exist
        run: |
          mkdir -p data/sources
          mkdir -p assets/hotels

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests
          fi

      - name: Run fetcher (image-free, low-cost)
        working-directory: scripts
        shell: bash
        run: |
          # Read inputs as strings and coerce booleans manually
          KW="${{ github.event.inputs.keywords }}"
          CTRS="${{ github.event.inputs.centers }}"
          RAD="${{ github.event.inputs.radius }}"
          PAGES="${{ github.event.inputs.max_pages_per_query }}"
          MAXP="${{ github.event.inputs.max_places }}"
          THROTTLE="${{ github.event.inputs.details_throttle_sec }}"
          WALL="${{ github.event.inputs.wall_timeout_sec }}"
          BASIC="${{ github.event.inputs.basic_only }}"
          NOFAV="${{ github.event.inputs.no_favicons }}"

          ARGS=()
          ARGS+=(--keywords "$KW")
          ARGS+=(--centers "$CTRS")
          ARGS+=(--radius "$RAD")
          ARGS+=(--max-pages-per-query "$PAGES")
          ARGS+=(--max-places "$MAXP")
          ARGS+=(--details-throttle-sec "$THROTTLE")
          ARGS+=(--wall-timeout-sec "$WALL")

          # Accept true/false in any case
          shopt -s nocasematch
          if [[ "$BASIC" == "true" ]]; then ARGS+=(--basic-only); fi
          if [[ "$NOFAV" == "true" ]]; then ARGS+=(--no-favicons); fi
          shopt -u nocasematch

          echo "Running: python fetch_hotels.py ${ARGS[*]}"
          python fetch_hotels.py "${ARGS[@]}"

      - name: Filter to Muscat polygon
        shell: bash
        run: |
          python - << 'PY'
import csv
from pathlib import Path

csv_path = Path("data/sources/hotels.csv")

def point_in_poly(lat, lng, poly):
    inside = False
    n = len(poly)
    for i in range(n):
        (x1, y1) = poly[i-1]
        (x2, y2) = poly[i]
        if ((y1 > lat) != (y2 > lat)):
            xinters = (x2 - x1) * (lat - y1) / (y2 - y1 + 1e-12) + x1
            if lng < xinters:
                inside = not inside
    return inside

MUSCAT_POLY = [
    (58.260, 23.655),  # NW of Al Mouj (offshore a bit)
    (58.225, 23.610),  # Seeb coast W
    (58.260, 23.560),  # Seeb inland
    (58.360, 23.540),  # Al Khoudh / Athaiba inland
    (58.430, 23.540),  # Ghubrah/Bausher inland
    (58.510, 23.520),  # Ruwi/Al Wadi Al Kabir inland
    (58.590, 23.520),  # Amerat ridge line
    (58.650, 23.560),  # Off Qantab coast (coastal)
    (58.705, 23.555),  # Yiti Beach offshore
    (58.735, 23.545),  # Shangri-La / Barr Al Jissah offshore
    (58.625, 23.575),  # Al Bustan coast
    (58.690, 23.600),  # off Muttrah coast (east)
    (58.600, 23.650),  # off Muttrah coast (north)
    (58.520, 23.640),  # off Shatti/Qurum coast
    (58.420, 23.640),  # off Athaiba/Qurum coast
    (58.340, 23.650),  # off Al Mouj coast
]

BBOX = (58.20, 58.76, 23.48, 23.70)

rows_out = []
with csv_path.open(newline="", encoding="utf-8") as f:
    rdr = csv.DictReader(f)
    fieldnames = rdr.fieldnames or []
    for r in rdr:
        try:
            lat = float((r.get("lat") or "").strip()); lng = float((r.get("lng") or "").strip())
        except Exception:
            continue
        in_bbox = (BBOX[0] <= lng <= BBOX[1]) and (BBOX[2] <= lat <= BBOX[3])
        if not in_bbox: continue
        if point_in_poly(lat, lng, MUSCAT_POLY):
            rows_out.append(r)

with csv_path.open("w", newline="", encoding="utf-8") as f:
    w = csv.DictWriter(f, fieldnames=fieldnames)
    w.writeheader(); w.writerows(rows_out)

print(f"Kept {len(rows_out)} rows within Muscat polygon (incl. Al Bustan, Qantab, Yiti, Shangri-La).")
PY

      - name: Ensure Python packages
        run: |
          mkdir -p scripts/utils
          touch scripts/__init__.py
          touch scripts/utils/__init__.py

      - name: Build tools.json from CSV
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: python -m scripts.ingest.csv_to_tools

      - name: Commit & push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Fetch hotels (image-free), filter to Muscat, & rebuild tools.json"
          branch: ${{ github.ref_name }}
          file_pattern: |
            data/sources/hotels.csv
            data/tools.json
